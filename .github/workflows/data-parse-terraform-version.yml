# Find Terraform Version from the versions.tf file
name: "[Data - Parse] Terraform Version"
on:
  workflow_dispatch:
  workflow_call:
    inputs:
      terraform_directory:
        type: string
        description: "Directory where terraform will be run from. Looks for versions.tf file in this path."
        required: true
      terraform_versions_file:
        type: string
        description: "Name of file that contains the required_version config is stored. (Default `./versions.tf`)"
        default: "./versions.tf"
    outputs:
      version:
        description: 'Discovered terraform version range. This may be an exact number (like 1.5.5) or a semver range (like >= 1.0).'
        value: ${{ jobs.discover_version_semver_range.outputs.terraform_version }}

permissions:
  contents: read
  security-events: none
  pull-requests: none
  actions: none
  checks: none
  deployments: none
  issues: none
  packages: none
  repository-projects: none
  statuses: none

defaults:
  run:
    shell: bash


jobs:
  config_summary:
    name: "Config"
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        if: always()
        run: |
          echo "### Terraform Version Config" >> $GITHUB_STEP_SUMMARY
          echo "| Option | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |"  >> $GITHUB_STEP_SUMMARY
          echo "| terraform_directory | ${{ inputs.terraform_directory }} |"  >> $GITHUB_STEP_SUMMARY
          echo "| terraform_versions_file | ${{ inputs.terraform_versions_file }} |"  >> $GITHUB_STEP_SUMMARY

  discover_version_semver_range:
    name: "Find [${{ inputs.terraform_versions_file }}], parse out the required_version data."
    runs-on: ubuntu-latest
    outputs:
      terraform_version: ${{ steps.version.outputs.terraform_version}}
    steps:
      - uses: actions/checkout@v4
      - id: check_file_exists
        working-directory: ${{ inputs.terraform_directory }}
        name: Check [${{ inputs.terraform_versions_file }}] check_file_exists
        run: |
          if [ ! -f ${{ inputs.terraform_versions_file }} ]; then
            echo "terraform_version=" >> $GITHUB_OUTPUT
            exit 1
          fi
      - id: version
        working-directory: ${{ inputs.terraform_directory }}
        name: Get terraform version
        run: |
          if [ -f ${{ inputs.terraform_versions_file }} ]; then
            terraform_version=$(cat ${{ inputs.terraform_versions_file }} | sed -r -n 's/.*required_version.*"(.*)"$/\1/p' )
            echo "terraform_version=${terraform_version}" >> $GITHUB_OUTPUT
          fi

  results:
    name: "Results"
    runs-on: ubuntu-latest
    needs: [discover_version_semver_range]
    steps:
      - name: Summary
        if: always()
        run: |
          echo "### Terraform Version Results" >> $GITHUB_STEP_SUMMARY
          echo "| Option | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |"  >> $GITHUB_STEP_SUMMARY
          echo "| terraform_version | ${{ needs.discover_version_semver_range.outputs.terraform_version }} |"  >> $GITHUB_STEP_SUMMARY
