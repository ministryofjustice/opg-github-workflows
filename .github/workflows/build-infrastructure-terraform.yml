name: "[Build - Infrastructure] Terraform Plan And Build"

on:
  workflow_call:
    inputs:
      terraform_version:
        type: string
        description: "Version of terraform to use"
        required: true
      terraform_wrapper:
        type: boolean
        description: "Enable terraform wrapper"
        default: false
        required: false
      terraform_directory:
        type: string
        description: "Directory to run terraform from"
        default: "./terraform"
        required: false
      terraform_workspace:
        type: string
        description: "Terraform workspace to use"
        required: true
      terraform_apply:
        type: boolean
        description: "Boolean to determine if we this runs the apply when true"
        default: false
        required: false
      terraform_variables:
        type: string
        description: 'String of terraform variables (-var="foo=bar") to use on commands'
        required: false
        default: ""
      aws_region:
        type: string
        description: "AWS region to use in creds"
        default: "eu-west-1"
        required: false
      workspace_manager_aws_account_id:
        type: string
        description: "AWS account id to use for workspace manager"
        default: ""
        required: false
      workspace_manager_aws_iam_role:
        type: string
        description: "AWS iam role used for workspace manager"
        default: ""
        required: false
      workspace_manager_protection_duration:
        type: string
        description: "Number of hours to protect the workspace for. Defaults to 24"
        required: false
        default: "24"
      is_ephemeral:
        type: boolean
        description: "Flag used to decide if the workspace should be registered for cleanup later"
        required: true
      use_ssh_private_key:
        type: boolean
        description: "Flag used to decide if the workflow should use the SSH_PRIVATE_KEY secret"
        required: false
        default: false
      persist_artifacts:
        type: boolean
        description: "Upload the artiacts in the artifact_directory"
        required: false
        default: false
      artifact_directory:
        type: string
        description: "Directory containing artifacts to be uploaded if persist_artifacts is true"
        required: false
        default: "/tmp/terraform_artifacts"
      terraform_version_file:
        type: string
        description: "File containing the terraform version to use"
        required: false
        default: "NOT_SET"

    outputs:
      terraform_output_as_json:
        description: "terraform output as json string"
        value: ${{ tojson(jobs.terraform_plan_and_apply.outputs.terraform_output_as_json) }}

    secrets:
      AWS_ACCESS_KEY_ID_ACTIONS:
        required: true
      AWS_SECRET_ACCESS_KEY_ACTIONS:
        required: true
      PAGERDUTY_TOKEN:
        required: true
      GITHUB_ACCESS_TOKEN:
        required: true
      CIRCLECI_TOKEN:
        required: false
      SSH_PRIVATE_KEY:
        required: false

jobs:
  config:
    name: "Workflow Config"
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: "Summary"
        run: |
          echo "### Config" >> $GITHUB_STEP_SUMMARY
          echo "| Option | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |"  >> $GITHUB_STEP_SUMMARY
          echo "| aws_region | ${{ inputs.aws_region }} |"  >> $GITHUB_STEP_SUMMARY
          echo "| is_ephemeral | ${{ inputs.is_ephemeral }} |"  >> $GITHUB_STEP_SUMMARY
          echo "| terraform_apply | ${{ inputs.terraform_apply }} |"  >> $GITHUB_STEP_SUMMARY
          echo "| terraform_directory | ${{ inputs.terraform_directory }} |"  >> $GITHUB_STEP_SUMMARY

          if [ -n "${{ inputs.terraform_variables }}" ]; then
            echo "| terraform_variables | SET |"  >> $GITHUB_STEP_SUMMARY
          else
            echo "| terraform_variables | NOT_SET |"  >> $GITHUB_STEP_SUMMARY
          fi

          echo "| terraform_version | ${{ inputs.terraform_version }} |"  >> $GITHUB_STEP_SUMMARY
          echo "| terraform_workspace | ${{ inputs.terraform_workspace }} |"  >> $GITHUB_STEP_SUMMARY
          echo "| terraform_wrapper | ${{ inputs.terraform_wrapper }} |"  >> $GITHUB_STEP_SUMMARY
          echo "| terraform_version_file | ${{ inputs.terraform_version_file }} |"  >> $GITHUB_STEP_SUMMARY

          echo "| use_ssh_private_key | ${{ inputs.use_ssh_private_key }} |"  >> $GITHUB_STEP_SUMMARY

          echo "| persist_artifacts | ${{ inputs.persist_artifacts }} |"  >> $GITHUB_STEP_SUMMARY
          echo "| artifact_directory | ${{ inputs.artifact_directory }} |"  >> $GITHUB_STEP_SUMMARY

          if [ -n "${{ inputs.workspace_manager_aws_account_id }}" ]; then
            echo "| workspace_manager_aws_account_id | SET |"  >> $GITHUB_STEP_SUMMARY
          else
            echo "| workspace_manager_aws_account_id | NOT_SET |"  >> $GITHUB_STEP_SUMMARY
          fi
          if [ -n "${{ inputs.workspace_manager_aws_iam_role }}" ]; then
            echo "| workspace_manager_aws_iam_role | SET |"  >> $GITHUB_STEP_SUMMARY
          else
            echo "| workspace_manager_aws_iam_role | NOT_SET |"  >> $GITHUB_STEP_SUMMARY
          fi

          echo "| workspace_manager_protection_duration | ${{ inputs.workspace_manager_protection_duration }} |"  >> $GITHUB_STEP_SUMMARY

  terraform_plan_and_apply:
    name: "[Build - Infrastructure] Terraform Plan And Apply"
    runs-on: ubuntu-latest
    needs: [config]
    outputs:
      terraform_output_as_json: ${{ steps.terraform_outputs.outputs.terraform_output_as_json }}
    steps:
      - uses: actions/checkout@v4
      - uses: unfor19/install-aws-cli-action@v1
      - name: Set Terraform version
        id: tf_version
        run: |
          if [ "${{ inputs.terraform_version_file }}" != "NOT_SET" ]; then
            echo "Using terraform version from file"
            if [ ! -f "${{ inputs.terraform_version_file }}" ]; then
              echo "Terraform version file not found"
              exit 1
            fi
            echo "TF_VERSION=$(cat ${{ inputs.terraform_version_file }})" >> $GITHUB_OUTPUT
          else
            echo "Using terraform version from input"
            echo "TF_VERSION=${{ inputs.terraform_version }}" >> $GITHUB_OUTPUT
          fi
        shell: bash
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ steps.tf_version.outputs.TF_VERSION }}
          terraform_wrapper: ${{ inputs.terraform_wrapper }}
      # ssh agent
      - name: Setup SSH private key
        uses: webfactory/ssh-agent@v0.8.0
        if: inputs.use_ssh_private_key == true
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      # aws credentials
      - name: Configure AWS Credentials For Terraform
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          aws-region: ${{ inputs.aws_region }}
          role-duration-seconds: 3600
          role-session-name: OPGTerraformGithubAction

      - name: Terraform Init
        run: |
          terraform init -lock-timeout=300s -input=false
        working-directory: ${{ inputs.terraform_directory }}

      - name: Terraform List Workspaces
        env:
          TF_WORKSPACE: ${{ inputs.terraform_workspace }}
        run: |
          terraform workspace list
        working-directory: ${{ inputs.terraform_directory }}

      - name: Terraform Plan
        env:
          TF_WORKSPACE: ${{ inputs.terraform_workspace }}
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          TF_VAR_github_token: ${{ secrets.GITHUB_ACCESS_TOKEN }}
          TF_VAR_pagerduty_token: ${{ secrets.PAGERDUTY_TOKEN }}
          TF_VAR_circleci_token: ${{ secrets.CIRCLECI_TOKEN }}
        run: |
          terraform workspace show
          terraform plan -lock-timeout=300s -input=false -parallelism=30 ${{ inputs.terraform_variables }}
        working-directory: ${{ inputs.terraform_directory }}

      - name: Register ephemeral workspace
        if: inputs.is_ephemeral == true
        run: |
          wget https://github.com/TomTucka/terraform-workspace-manager/releases/download/v0.3.1/terraform-workspace-manager_Linux_x86_64.tar.gz -O $HOME/terraform-workspace-manager.tar.gz
          sudo tar -xvf $HOME/terraform-workspace-manager.tar.gz -C /usr/local/bin
          sudo chmod +x /usr/local/bin/terraform-workspace-manager
          terraform-workspace-manager -register-workspace=${{ inputs.terraform_workspace }} -time-to-protect=${{ inputs.workspace_manager_protection_duration }} -aws-account-id=${{ inputs.workspace_manager_aws_account_id }} -aws-iam-role=${{ inputs.workspace_manager_aws_iam_role }}
        working-directory: ${{ inputs.terraform_directory }}

      - name: Terraform Apply
        if: inputs.terraform_apply == true
        env:
          TF_WORKSPACE: ${{ inputs.terraform_workspace }}
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
          TF_VAR_github_token: ${{ secrets.GITHUB_ACCESS_TOKEN }}
          TF_VAR_pagerduty_token: ${{ secrets.PAGERDUTY_TOKEN }}
          TF_VAR_circleci_token: ${{ secrets.CIRCLECI_TOKEN }}
        run: |
          terraform apply -lock-timeout=300s -input=false -auto-approve -parallelism=30 ${{ inputs.terraform_variables }}
        working-directory: ${{ inputs.terraform_directory }}

      - name: Persist Terraform Artifacts
        uses: actions/upload-artifact@v3
        if: inputs.persist_artifacts == true
        with:
          name: terraform-artifact
          path: ${{ inputs.artifact_directory }}


      - name: Terraform Outputs
        id: terraform_outputs
        env:
          TF_WORKSPACE: ${{ inputs.terraform_workspace }}
        run: |
          echo "terraform_output_as_json<<EOF" >> $GITHUB_OUTPUT
          terraform output -json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        working-directory: ${{ inputs.terraform_directory }}
